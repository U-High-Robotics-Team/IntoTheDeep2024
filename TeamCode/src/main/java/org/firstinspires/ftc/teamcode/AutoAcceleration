package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name="Motor Encoder Test", group="Test")

public class MotorEncoderTest extends LinearOpMode {

    private DcMotor         frontleft   = null;
    private DcMotor         frontright  = null;
    private DcMotor         backleft  = null;
    private DcMotor         backright  = null;

    private ElapsedTime     runtime = new ElapsedTime();

    static final double     COUNTS_PER_MOTOR_REV    = 1440 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // No External Gearing.
    static final double     WHEEL_DIAMETER_INCHES   = 4.0 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
                                                      (WHEEL_DIAMETER_INCHES * 3.14159);
    static final double           DRIVE_SPEED             = 1.0;
    static final double     TURN_SPEED              = 0.5;
    static double maxSpeed = 1;
    static double originalSpeed = 0;
    static double setSpeed = 0;

    @Override
    public void runOpMode() {

        // The names in quotes must match the names used in the REV Control Hub configuration
        frontleft  = hardwareMap.get(DcMotor.class, "frontleft");
        frontright  = hardwareMap.get(DcMotor.class, "frontright");
        backleft  = hardwareMap.get(DcMotor.class, "backleft");
        backright  = hardwareMap.get(DcMotor.class, "backright");
    
        // Adjust these based on installation direction of the motor
        frontleft.setDirection(DcMotor.Direction.REVERSE);
        frontright.setDirection(DcMotor.Direction.FORWARD);
        backleft.setDirection(DcMotor.Direction.REVERSE);
        backright.setDirection(DcMotor.Direction.FORWARD);

        // Set encoder values to zero at start
        frontleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        // ...and use encoder-position-based control (not speed) 
        frontleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        telemetry.addData("Starting at",  "%7d :%7d",
                          frontleft.getCurrentPosition(),
                          frontright.getCurrentPosition(),
                          backleft.getCurrentPosition(),
                          backright.getCurrentPosition());
        telemetry.update();

        waitForStart();
        
        encoderDrive(DRIVE_SPEED,  48,  48, 5.0);  // S1: Forward 47 Inches with 5 Sec timeout
        //encoderDrive(TURN_SPEED,   12, -12, 4.0);  // S2: Turn Right 12 Inches with 4 Sec timeout
        //encoderDrive(DRIVE_SPEED, -24, -24, 4.0);  // S3: Reverse 24 Inches with 4 Sec timeout

        telemetry.addData("Path", "Complete");
        telemetry.update();
        sleep(1000);  // pause to display final telemetry message.
    }

    /*
     *  Method to perform a relative move, based on encoder counts.
     *  Encoders are not reset as the move is based on the current position.
     *  Reverse movement is obtained by setting a negative distance (not speed)
     *  Move will stop if any of three conditions occur:
     *  1) Move gets to the desired position
     *  2) Move runs out of time
     *  3) Driver stops the OpMode running.
     */
    public void encoderDrive(double speed, double xInches, double yInches, double timeoutS) {
        int flTarget;
        int frTarget;
        int blTarget;
        int brTarget;
        
        flTarget = 5000; //frontleft.getCurrentPosition() + (int)(yInches * COUNTS_PER_INCH);
        frTarget = 5000; //frontright.getCurrentPosition() + (int)(yInches * COUNTS_PER_INCH);
        blTarget = 5000;
        brTarget = 5000;
        
        frontleft.setTargetPosition(flTarget);
        frontright.setTargetPosition(frTarget);
        backleft.setTargetPosition(blTarget);
        backright.setTargetPosition(brTarget);
        
        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        runtime.reset();
        // does not move yet since speed is zero
        
        boolean motorsBusy = true;
        while (opModeIsActive() && motorsBusy && runtime.seconds() < timeoutS && setSpeed <= maxSpeed) {
            frontleft.setPower(Math.abs(setSpeed));
            frontright.setPower(Math.abs(setSpeed));
            backleft.setPower(Math.abs(setSpeed));
            backright.setPower(Math.abs(setSpeed));
            setSpeed+=0.1;
            motorsBusy = frontleft.isBusy() || frontright.isBusy() || backleft.isBusy() || backright.isBusy();
        }

        frontleft.setPower(0);
        frontright.setPower(0);
        backleft.setPower(0);
        backright.setPower(0);

        // WHY? (Turn off RUN_TO_POSITION)
        //leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        //rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
   }
   
}
